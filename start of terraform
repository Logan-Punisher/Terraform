provider "aws" { #Provide the Service like "aws" "azure" or "GCP"  region = "us-east-1"  # Set your desired AWS region
}


resource "aws_instance" "logan" {
    ami = "ami-07761f3ae34c4478d" # Image of the OS for EC2
    instance_type = "t2.micro" # Cheapest and free under the aws free-tier and does the base computation
    subnet_id = "subnet-0a8c2b8941c932bcd" # if Default VPC is not present of deleted then specifying is not worth it and if the subnet is not present then create the subnet under default vpc 
    key_name = "Logan_Excon" # key pair 
}

# this is the basic 




#Next - Project : provisioner
provider "aws" {
    region = "us-east-1"
}

variable "cidr" {
    default = "10.0.0.0/16"
}

resource "aws_key_pair" "ExX" {
    key_name = "ExX"
    public_key = file("ExX.pub")
}

resource "aws_vpc" "demovpc" {
    cidr_block = var.cidr
}

resource "aws_subnet" "sub1a" {
    vpc_id = aws_vpc.demovpc.id
    cidr_block = "10.0.0.0/24"
    availability_zone = "us-east-1a"
    map_public_ip_on_launch = true
}

resource "aws_internet_gateway" "igw" {
    vpc_id = aws_vpc.demovpc.id
}

resource "aws_route_table" "rt" {
    vpc_id = aws_vpc.demovpc.id

    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.igw.id
    }
}

resource "aws_route_table_association" "rta" {
    subnet_id = aws_subnet.sub1a.id
    route_table_id = aws_route_table.rt.id
  
}

resource "aws_security_group" "SG" {
    name = "SG-Rule"
    vpc_id = aws_vpc.demovpc.id

    ingress {
        description = "HTTP from VPC"
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = [ "0.0.0.0/0" ]
    }
    ingress {
        description = "ssh"
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = [ "0.0.0.0/0" ]
    }

    egress {
        from_port = 0
        to_port = 0
        protocol = -1
        cidr_blocks = [ "0.0.0.0/0" ]
    }
    tags = {
      Name = "Web-sg"
    }  
}
resource "aws_instance" "server" {
    ami = "ami-07d9b9ddc6cd8dd30"
    instance_type = "t2.micro"
    key_name = aws_key_pair.ExX.key_name
    vpc_security_group_ids = [ aws_security_group.SG.id ]
    subnet_id = aws_subnet.sub1a.id

    connection {
        type = "ssh"
        user = "ubuntu"
        private_key = file("ExX")
        host = self.public_ip    
    }

    provisioner "file" {
        source = "app.py"
        destination = "/home/ubuntu/app.py"
    }

    provisioner "remote-exec" {
        inline = [ 

            "echo 'Hello from the remote instance'",
            "sudo apt update -y",  # Update package lists (for ubuntu)
            "sudo apt-get install -y python3-pip",  
            "cd /home/ubuntu",
            "sudo pip3 install flask",
            "sudo python3 app.py ",
         ]  
      
    }
  
}

#terraform Workspace

